fiddler:::::::::::
快捷键：：：：
m：添加注释
r键：replay 重放  
shift+r：：  循环多少次（重放攻击）可做简单的压力测试
del键：删除该请求
shift+del： 删除未选择的请求(除此请求之外，其他全部删除)
ctrl+a：全选
ctrl+X：删除所有的请求session列表
ctrl+（1-6）：标记颜色和粗体
ctrl+0：删除标记的颜色和粗体
d：选择与该session相同的session
c：选择当前session的子session
p：选择当前session的父session
工具栏：
repaly：重发
go：断点（请求前断点）  下边有请求前断点和响应前断点
Steam：流模式，一般不用，我们用的是缓冲模式
Decode：解码
Keep：   选择会话框进程数量
Any Process：选择被抓包对象
Find：查找关键字（ctrl+F）

命令栏：
bpu  打断点  bpu：再次输入去断点
?something  ：高亮，变色
> 大于多少字节/KB

断点：请求前断点和响应前断点


Excal解析：
// 工作薄。   通过工作薄的工厂创建
WorkBook workBook = WorkBookFactory.create(file)


TestNg笔记::
1.一个suite（套件）由一个或者多个测试（test）构成
2.一个test（测试）由一个或者多个类（classes）构成
3.一个classes（类）由一个或者多个类（class）构成
4.一个class（类）由一个或者多个方法（）构成

注解方法：
@BeforeMethod/@AfterMethod
在某个测试方法（method）执行之前/结束之后
@BeforeClass/@AfterClass
在某个测试类（class）所有·开始之前/结束之后
@BeforeTest/@AfterTest
在某个测试（test）所有测试方法执行开始之前/结束之后
@BeforeSuite/@AfterSuite 
在某个测试套件（suite）所有测试方法执行开始之前/结束之后


httpClient:
api:::
http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/
中文学习网：
http://www.httpclient.cn/2.html

jsonPath:

Xpath	JSONPath	描述
/		$			跟节点
.		@			现行节点
/		. or []		取子节点
..		n/a			就是不管位置，选择所有符合条件的条件
*		*			匹配所有元素节点
[]		[]			迭代器标示(可以在里面做简单的迭代操作，如数组下标，根据内容选值等)
&#124	[,]			支持迭代器中做多选
[]		?()			支持过滤操作
n/a		()			支持表达式计算
()		n/a			分组，JsonPath不支持



正则：
// 把${mobile_phone}提取出来--》提取出mobile_phone--
// 正这表达式： \$\{.*?\}
String regex = "\\$\\{(.*?)\\}";
// 1.正则表达式创建一个模式(规则)对象
Pattern compile = Pattern.compile(regex);
// 2.对字符串进行匹配
Matcher matcher = compile.matcher(reqStr);
while (matcher.find()) {
    // 表示完全匹配的内容(分组：用括号)
    String totalStr = matcher.group(0);
    // 分组后的匹配内容（参数名）：括号里的部分
    String parame = matcher.group(1);
    // System.out.println(group);
    // 从容器中找到对应的值
    Object parameValue = globalParameMap.get(parame);
    // System.out.println(parame+"=="+parameValue);
    // 替换符合规则的文本
    if(parameValue!=null){// 不为空才替换，为空，不换
   		 reqStr = reqStr.replace(totalStr, parameValue.toString()); 	
    }
   
}


鉴权:资源、接口！权限！！权限鉴定！！鉴权！！令牌！！
1.cookie  session
2.token 
3.timestamp+token+sign 时间戳+token+签名
 反对称加密：公钥（加密：客户端）；私钥（解密）

token鉴权：
请求头：
key:Authorization
value: Bearer token的值，如：eyJhbGciOiJIUzUxMiJ9.

[{"name":"X-Lemonban-Media-Type","value":"lemonban.v2"}]

[{"getData":"$.data.id","toGloableParame":"member_id"},{"getData":"$.data.token_info.token","toGloableParame":"token"}]

{"code":1005,"msg":"JWT strings must contain exactly 2 period characters. Found: 0","data":null,"copyright":"Copyright 柠檬班 © 2017-2019 湖南省零檬信息技术有限公司 All Rights Reserved"}

是Maven项目，请先将依赖安装到Maven本地仓库：命令
mvn install:install-file -Dfile=D:\lemoner.jar -DgroupId=com.lemon-DartifactId=lemoner -Dversion=1.0 -Dpackaging=jar 




持续集成：

第三方测试报告：testng    ReportNG   extentreport   allure
allure  下载，2.get started里边
需要配置环境变量
命令：allure serve allure-results(测试报告的路径) 
<!-- allure测试报表 -->
		<dependency>
			<groupId>io.qameta.allure</groupId>
			<artifactId>allure-testng</artifactId>
			<version>2.12.1</version>
			<scope>test</scope>
		</dependency>

<build>
		<plugins>
			<!-- 指定jdk版本，防止jdk构建版本变动 解决每次右键项目名-maven->update project 时候，项目jdk版本变了，变回1.5版本或者其他版本 
				解决使用maven编译其他问题：如提示不能在内部类访问外部非final局部变量 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- 为了后期集成jenkins等自动化平台，我们必须保证自己的脚本可以通过命令脚本来调动执行。 实现方式：集成maven的surefire插件, 
				Surefire插件用于Maven项目的test阶段，以执行单元测试。集成后我们就可以通过maven命令 maven test 来调动脚本执行了。 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<argLine>
						-javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
					</argLine>
					<suiteXmlFiles>
						<suiteXmlFile>testng.xml</suiteXmlFile>
					</suiteXmlFiles>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjweaver</artifactId>
						<version>${aspectj.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>


jenkins构建:
配置邮箱：
系统配置中配置
	系统管理员邮件地址: 342555822@qq.com
	Extended E-mail Notification中：
		SMTP server	： 					smtp.qq.com
		Default user E-mail suffix::	@qq.com
	Use SMTP Authentication:
		User Name: 	342555822@qq.com
		password: 	nahvedfjbztbbhhj（授权密码）nahvedfjbztbbhhj
	勾上Use SSL
		SMTP port： 465

1、下载maven插件，maven intergration
2.新建-->创建一个maven项目
3.源码管理：（1）svn
			(2) git
4.build:
（1）root pom指定
（2）goals and options（需要执行的maven命令：clean 、test）

5.构建触发器：
（1）poll scm
（2）Build periodically 日程表，类似cron表达式
Global Tool Configuration：
Allure Commandline  配置allure的安装目录（E:\soft\CI\allure-2.12.1）

6.构建后操作：
项目配置allure的内容
（1）新增Editable email notifications
（2）
（3）
（4）
https://github.com/zswzaq/api_13.git






默认主题：
自动化测试通知: $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS
<hr> 
(本邮件是程序自动下发的，请勿回复！)<br><hr> 
项目名称：$PROJECT_NAME<br><hr> 构建编号：$BUILD_NUMBER<br><hr> 
构建状态：$BUILD_STATUS<br><hr> 触发原因：${CAUSE}<br><hr> 
测试报告：<a href="http://127.0.0.1:8887/html/index.html">http://127.0.0.1: 8887/html/index.html</a> <br><hr> 
构建日志地址：<a href="${BUILD_URL}console">${BUILD_URL}console/</a><br><hr> 
构建地址：<a href="$BUILD_URL">$BUILD_URL</a><br><hr> 
构建报告：<a href="${BUILD_URL}testReport">${BUILD_URL}testReport/</a><br>< hr> 
变更集:${JELLY_SCRIPT,template="html"}<br><hr/>
